{"version":3,"sources":["containers/App.css","components/UI/Spinner/Spinner.css","components/UI/Spinner/Spinner.js","hoc/Layout/Layout.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","Loader","load2","Spinner_Spinner","spinner","react_default","a","createElement","className","classes","hoc_Layout_Layout","Layout","containers_App","isLocalhost","Boolean","window","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","document","URL","process","href","publicUrl","origin","concat","fetch","response","contentType","checkValidServiceWorker"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,IAAA,oCCAlBF,EAAAC,QAAA,CAAkBE,OAAA,yBAAAC,MAAA,kMCOlBC,EAJMC,WAAU,OACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAhBR,QADY,eCGhBS,EALMC,WACF,OACIN,EAAAC,EAAAC,cAAA,UADJ,WCWJ,IAAAK,EATA,WACE,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAhBT,KACCK,EAAAC,EAAAC,cAAAJ,EADD,MAECE,EAAAC,EAAAC,cAAAG,EAHH,QCMIG,EAAcC,QAClBC,kDAEEA,0BAEAA,+BALJ,2DA4CA,SAAAC,EAAAC,EAAAC,GACEC,UAAAC,cAAAC,SAAAJ,GAAAK,KAEQ,SAAAC,GACJA,EAAAC,cAA6B,WAC3B,IAAMC,EAAmBF,EAAzBG,WACA,MAAID,IAGJA,EAAAE,cAAiC,WAC/B,cAAIF,UACEN,wBAAJS,YAIEC,YACE,iHAKEX,GAAUA,EAAdY,UACEZ,gBAMFW,kDAGIX,GAAUA,EAAda,WACEb,sBA/Bdc,MAsCS,SAAAC,GACLJ,+DC1FNK,WAAgB7B,EAAAC,EAAAC,cAAAK,EAAhBsB,MAAyBC,wBAAzBD,SDgBO,SAAAhB,GACL,GAA6C,kBAA7CC,UAA2E,CAGzE,GADkB,IAAAiB,IAAQC,YAAwBtB,gBAAlDuB,MACIC,SAAqBxB,gBAAzByB,OAIE,OAGFzB,+BAAgC,WAC9B,IAAME,EAAK,GAAAwB,OAAMJ,YAAjB,sBAEAxB,GAgEN,SAAAI,EAAAC,GAEEwB,cACQ,SAAAC,GAEJ,IAAMC,EAAcD,cAApB,gBAEEA,gBACCC,UAFH,IAE0BA,wBAGxBzB,mCAAmC,SAAAI,GACjCA,oBAA+B,WAC7BR,6BAKJC,EAAeC,EAAfD,KAhBN0B,MAmBS,WACLb,+EApFEgB,CAAuB5B,EAAvB4B,GAIA1B,mCAAmC,WACjCU,YACE,gHAMJb,EAAeC,EAAfD,MC1CRI","file":"static/js/main.281371fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App__App__2NQx7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner__Loader__1DDwY\",\"load2\":\"Spinner__load2__1N7mg\"};","import React from 'react';\r\n\r\nimport classes from './Spinner.css';\r\n\r\nconst spinner = () => (\r\n    <div className={classes.Loader}>Loading...</div>\r\n);\r\n\r\nexport default spinner;","import React from 'react';\r\n\r\nconst Layout = () => {\r\n    return(\r\n        <h2>Layout</h2>\r\n    );\r\n};\r\nexport default Layout;","import React from 'react';\nimport classes from './App.css';\nimport Spinner from '../components/UI/Spinner/Spinner';\nimport Layout from '../hoc/Layout/Layout';\n\nfunction App() {\n  return (\n    <div className={classes.App} >\n     <Spinner />\n     <Layout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}